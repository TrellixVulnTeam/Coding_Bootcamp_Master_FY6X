1. What is a callback? Write an example

1) A callback is a function passed as an argument to another function, This technique allows a function to call another function. A callback function can run after another function has finished
The benefit of using a callback function is that you can wait for the result of a previous function call and then execute another function call.
Code:
Without callback: Ramana Hello - async execution
function greet() {
    console.log('Hello');
}

function sayName(name) {
    console.log(' ' + name);
}
setTimeout(greet,2000);  // calling the function after 2 seconds
sayName("Ramana");

with callback: Hello Ramana
function greet(name, myFunction) {
    console.log('Hello');

    myFunction(name);
}
//callback function
function sayName(name) {
    console.log(' ' + name);
}

greet("ravana",sayName);



2. What is a closure? Write an example

2) Inner function can access variables and parameters of an outer function even after the function is executed.
Code:
function makeFunc() {
  var name = 'Mozilla';
  function displayName() {
    alert(name);
  }
  return displayName;
}
var myFunc = makeFunc();
myFunc();


3. What is a IIFE? Write real time use cases of IIFE

3) An Immediately Invoked Function Expression (IIFE) is a JavaScript function that runs as soon as it is defined. When you want something to happen immediately at some point of time.
To avoid declaring variables in global scope and create closure. The primary reason to use an IIFE is to obtain data privacy. Because JavaScript's var scopes variables to their containing function, any variables declared within the IIFE cannot be accessed by the outside


4. What are the uses of ‘use strict’?

4) It helps you to write cleaner code, like preventing you from using undeclared variables. Makes debugging easier. Eliminates this coercion(Forcing). We can't force anything to happen our way.


5. What is the difference between parameters and arguments?

5) Parameters are the names you specify in the function definition(Taken into the function). Arguments are the values you pass to the function.


6. What is the difference between a function and a method?

6) A function is a block of code to do a particular task. A Method is a property of an object that contains a function definition. Methods are functions stored as object properties.


7. Write a sample program with more than one callback

7)Code:
function multiply(a, b, callback)
            {
                var result = a * b;
                callback(result);
            }
function addition(a, b, callback)
            {
                var result = a + b;
                callback(result);
            }
 
            function ouput(sum)
            {
                console.log("Multiplication of the provided inputs are: " + sum);
            }
 
            multiply(5, 6, ouput);
            addition(5, 6, ouput);


8. What is a promise? Write a sample program using promises

8)standard way to deal with asynchronous code. To avoid callback hell. we use promises
Code:
var promise = new Promise(function(resolve, reject) {
    setTimeout(function() {
        resolve('hello world');
    }, 2000);
});

promise.then(function(data) {
    console.log(data);
});


9. Use then, catch and finally block and write a promise

9)Code:
Example1:
function checkMail() {
    return new Promise((resolve, reject) => {
      if (Math.random() > 0.5) {
        resolve('Mail has arrived');
      } else {
        reject(new Error('Failed to arrive'));
      }
    });
  }
  
  checkMail()
    .then((mail) => {
      console.log(mail);
    })
    .catch((err) => {
      console.error(err);
    })
    .finally(() => {
      console.log('Experiment completed');
    });

Example2:
var promise = new Promise(function(resolve, reject) {
    setTimeout(function() {
        resolve('hello world');
    }, 2000);
});

promise.then(val => console.log(val))
promise.catch(err => console.log("Failed!"))
promise.finally(() => console.log("Promise complete!"))


10. Write a promise that resolves after 10 seconds

10)Code:
let promise = new Promise(function(resolve, reject) {
  setTimeout(() => resolve("done"), 10000);
});


11. Use aysnc/await and write a sample program

11) To work with promises in a synchronous way. When first one gets executed completely then only second starts executing.
Code:
async function myDisplay() {
  let myPromise = new Promise(function(resolve) {
    setTimeout(function() {resolve("You did it !!");}, 10000);
  });
  document.getElementById("demo").innerHTML = await myPromise;
}
myDisplay();




12. Write a sample program to modify contents of a paragraph using Javascript
and DOM API

12)Code:
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript can Change HTML</h2>

<p id="p1">Hello World!</p>

<script>
document.getElementById("p1").innerHTML = "New text!";
</script>

<p>The paragraph above was changed by a script.</p>

</body>
</html>


13. Write a Cat class and create two objects.

13)Code:
class Cat {
  constructor(name) {
    this.name = name;
  }
  sayHi() {
    console.log("Hello catty");
  }
}
let cat1 = new Cat("cat 1");
let cat2 = new Cat("cat 2");
cat1.sayHi();
cat2.sayHi();


14. What is the difference between call, apply and bind. Write an example for
each

14)These are methods that can be used on JS functions, To apply the execution context of an object. Call invokes the function and allows you to pass in arguments one by one. Apply invokes the function and allows you to pass in arguments as an array. Bind returns a new function, allowing you to pass in a this array and any number of arguments.
In bind we can pass values as array
In call we can pass values using , separator.



15. What is call by value and call by reference?

15) Here in call by value we pass the actual value but in call by reference we pass the address of the value.



